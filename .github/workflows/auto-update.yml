name: auto-update
on:
  workflow_dispatch:
  schedule:
    - cron: '*/20 * * * *'

permissions:
  contents: write
  pages: write

jobs:
  auto-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      # setup jq
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Commit changes
        run: |
          # SORACOM APIキーとシークレットを使用してトークンを取得
          echo "step: get token"
          SORACOM_TOKEN_JSON=$(curl -s -X POST "https://api.soracom.io/v1/auth" \
            -H "Content-Type: application/json" \
            -d "{
              \"authKeyId\": \"$SORACOM_AUTH_KEY_ID\",
              \"authKey\": \"$SORACOM_AUTH_KEY\"
            }")
          # レスポンスからtokenとapi_idを取得
          SORACOM_TOKEN=$(echo "$SORACOM_TOKEN_JSON" | jq -r '.token')
          SORACOM_API_ID=$(echo "$SORACOM_TOKEN_JSON" | jq -r '.apiKey')
          # SORACOM APIでSIMデータを取得
          echo "step: get sim data"
          # 前日の0時(JST)のタイムスタンプを取得
          from=$(date -d "yesterday 00:00 JST" +%s)000
          # 現在時刻のタイムスタンプを取得
          to=$(date +%s)000
          SIM_DATA=$(curl -s -X GET "https://api.soracom.io/v1/sims/$SIM_ID/data?from=$from&to=$to&limit=288&sort=asc" \
            -H "X-Soracom-API-Key: $SORACOM_API_ID" \
            -H "X-Soracom-Token: $SORACOM_TOKEN")
          # トークンをrevoke
          echo "step: revoke token"
          curl -s -X POST "https://api.soracom.io/v1/auth/logout" \
            -H "X-Soracom-API-Key: $SORACOM_API_ID" \
            -H "X-Soracom-Token: $SORACOM_TOKEN"
          # SIM_DATAをjqでパースして、contentを文字列として取得し、それをJSONとしてパースしてpayloadを取得し、tempを取得する。timeとtempをjsonファイル出力する。
          echo "step: parse json"
          # SIM_DATAが取得できているか確認
          if [ -z "$SIM_DATA" ]; then
              echo "Failed to retrieve SIM data. Please check your API key and secret."
              exit
          fi
          # SIM_DATAを読み込み、contentを文字列として取得し、それをJSONとしてパースしてpayloadを取得し、tempを取得する
          json_output="{\"temperatures\":["
          first=true
          while read -r item; do
              content=$(echo "$item" | jq -r '.content')
              payload=$(echo "$content" | jq -r '.payload | @base64d')
              temp=$(echo "$payload" | jq -r '.temp')
              if [ -z "$temp" ]; then
                  echo "Failed to retrieve temperature from item." >&2
                  continue
              fi
              # timeを取得する
              time=$(echo "$item" | jq -r '.time')
              # timeをepocからdateに変換する（ミリ秒を秒に変換）
              date=$(date -d "@$((time/1000))" +"%Y-%m-%d %H:%M:%S")
              bat=$(echo "$payload" | jq -r '.bat')
              # JSON配列に追加
              if [ "$first" = true ]; then
                  first=false
              else
                  json_output="$json_output,"
              fi
              json_output="$json_output {\"time\": $time, \"temp\": $temp, \"bat\": $bat}"
          done < <(jq -c '.[]' <<< "$SIM_DATA")
          json_output="$json_output ]}"
          # 最後にJSON出力
          # 例：
          # {
          #   "temperatures": [
          #     {"time": 1716537600000, "temp": 25.3},
          #     {"time": 1716624000000, "temp": 26.1},
          #     {"time": 1716710400000, "temp": 24.8}
          #   ]
          # }
          echo "$json_output" > temperatures.json
          # temperatures.jsonをGitHubにpushする
          echo "step: git push"
          # temperatures.jsonに変更があった場合のみcommitとpushを行う
          if git diff --name-only | grep -q "temperatures.json" || [ ! -f temperatures.json ]; then
            git config --local user.name "mitsuzono"
            git config --local user.email "mitsuzono@users.noreply.github.com"
            git add temperatures.json
            git commit -m "Update temperatures.json"
            # GITHUB_TOKENを使用してリモートリポジトリにpush
            git push https://$GITHUB_TOKEN@github.com/$REPO_OWNER/$REPO_NAME.git main
          else
            echo "No changes detected in temperatures.json, skipping commit and push."
          fi
          echo "step: completed"
        env:
          SORACOM_AUTH_KEY_ID: ${{ secrets.SORACOM_AUTH_KEY_ID }}
          SORACOM_AUTH_KEY: ${{ secrets.SORACOM_AUTH_KEY }}
          SIM_ID: ${{ secrets.SIM_ID }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
